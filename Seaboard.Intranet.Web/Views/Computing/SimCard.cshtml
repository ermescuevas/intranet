@using Microsoft.AspNet.Identity;
@model Seaboard.Intranet.Domain.SimCard

@{
    ViewBag.Title = "Tarjeta SIM";
    var operators = (List<SelectListItem>)ViewBag.Operators;
    var status = (List<SelectListItem>)ViewBag.Status;
    var minute = (List<SelectListItem>)ViewBag.Minute;
    Layout = "~/Views/Shared/_ComputingLayout.cshtml";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Tarjeta SIM</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">Inicio</a>
            </li>
            <li>
                <a href="@Url.Action("SimCardIndex", "Computing")">Listado de tarjetas SIM</a>
            </li>
            <li class="active">
                <strong>Tarjeta SIM</strong>
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h3>Tarjeta SIM</h3>
                </div>

                <div class="ibox-content">
                    <div class="form-group">
                        <div class="col-sm-12 col-sm-offset-1">
                            <button class="btn btn-primary" type="button" onclick="guardar();"><i class="fa fa-save"></i> Guardar</button>
                            @if (string.IsNullOrEmpty(Model.PhoneNumber))
                            {
                                <button class="btn btn-white" type="button" onclick="limpiarCampos();"><i class="fa fa-eraser"></i> Borrar</button>
                            }
                            else
                            {
                                <button class="btn btn-danger" type="button" onclick="eliminar();"><i class="fa fa-remove"></i> Eliminar</button>
                            }
                            <br />
                        </div>
                    </div>
                    <br />
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="tabs-container">
            <ul class="nav nav-tabs">
                <li class="active">
                    <a data-toggle="tab" href="#tab-1"> Datos Basicos</a>
                </li>
                <li class="">
                    <a data-toggle="tab" href="#tab-2" onclick="cargarArchivos();"> Adjuntos</a>
                </li>
            </ul>

            <div class="tab-content">
                <div id="tab-1" class="tab-pane active">
                    @using (Html.BeginForm("SaveSimCard", "Computing", FormMethod.Get, new { @id = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="panel-body">
                            <fieldset class="form-horizontal">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Id. de tarjeta:</label>
                                            <div class="col-sm-4 input-group">
                                                @Html.TextBoxFor(m => m.SimCardCode, new { @class = "form-control", @readonly = "" })
                                                @Html.ValidationMessageFor(model => model.SimCardCode, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Numero de telefono:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Numero de serie:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.TextBoxFor(m => m.SerialNumber, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.SerialNumber, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Operadora:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.DropDownListFor(m => m.Operator, operators, "Seleccione una opción", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Operator, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Tiene datos:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.CheckBoxFor(model => model.HasData, new { @class = "js-switch" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Tipo flota:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.DropDownListFor(m => m.MinuteOpen, minute, "Seleccione una opción", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.MinuteOpen, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-5">
                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Cantidad de gigas(GB):</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.TextBoxFor(model => model.DataQuantity, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Cantidad de minutos:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.TextBoxFor(model => model.QuantityMinutes, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        @Html.HiddenFor(m => m.AsignedEquipment)

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Fecha de adquisición:</label>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                                @Html.TextBoxFor(m => m.AcquiredDate, new { @class = "form-control", @Value = Model.AcquiredDate.ToString("MM/dd/yyyy") })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Fecha de entrega:</label>
                                            <div class="col-sm-8 input-group">
                                                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                                @Html.TextBoxFor(m => m.DeliveryDate, new { @class = "form-control", @Value = Model.DeliveryDate.ToString("MM/dd/yyyy") })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Cantidad cambiazo/fidepuntos:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.TextBoxFor(m => m.ChangePoints, new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="col-sm-4 control-label">Estado:</label>
                                            <div class="col-sm-8 input-group">
                                                @Html.DropDownListFor(m => m.Status, status, "Seleccione una opción", new { @class = "form-control", @Value = Model.Status.ToString() })
                                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    }
                </div>

                <div id="tab-2" class="tab-pane">
                    <div class="panel-body">
                        <div class="row">
                            <form action="javascript:;" method="post" enctype="multipart/form-data" id="attachmentForm" accept-charset="utf-8">
                                <div class="col-md-9">
                                    <div class="fileinput fileinput-new input-group" data-provides="fileinput">
                                        <div class="form-control" data-trigger="fileinput">
                                            <i class="glyphicon glyphicon-file fileinput-exists"></i>
                                            <span class="fileinput-filename"></span>
                                        </div>
                                        <span class="input-group-addon btn btn-default btn-file"><span class="fileinput-new">Seleccionar archivo</span><span class="fileinput-exists">Cambiar</span><input type="file" name="FileData" id="FileData"></span>
                                        <a href="#" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput">Borrar</a>
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <button type="button" class="btn btn-success" onclick="atacharArchivo();" data-dismiss="modal">Adjuntar</button>
                                </div>
                            </form>
                        </div>

                        <div class="hr-line-dashed"></div>

                        <div class="row" id="attachmentFiles">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <link href="@Url.Content("~/Content/plugins/lookupbox/lookupbox.css")" rel="stylesheet" type="text/css" />
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/switcheryStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/plugins/sweetAlertStyles")
}

@section Scripts {
    @Scripts.Render("~/Scripts/plugins/jquery-ui/jquery-ui.min.js")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/Scripts/plugins/lookupbox/jquery.lookupbox.js")
    @Scripts.Render("~/plugins/switchery")
    @Scripts.Render("~/plugins/sweetAlert")

    <script>
        $(document).ready(function () {
            var elem = document.querySelector('.js-switch');
            var switchery = new Switchery(elem, { color: '#1AB394' });
            $('#AcquiredDate').datepicker({
                todayBtn: "linked",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true
            });
            $("#lookupEquipo").lookupbox({
                title: 'Busqueda:',
                url: '@Url.Action("LookupData", "Computing")?tipo=3&consultaExtra=&consulta=',
                imgLoader: '<img src="~/Images/ajaxloader.gif">',
                width: 800,
                height: 1000,
                onItemSelected: function (data) {
                    $('input[name=AsignedEquipment]').val(data.Id.trim() + ' - ' + data.Descripción);
                },
                tableHeader: ['Id. de dispositivo', 'Modelo', 'Numero de serie'],
                hiddenFields: ['DataPlus']
            });
            $('#Status').val('@Model.Status.ToString()');
        });

        window.onbeforeunload = function () { $.ajax({ url: '@Url.Action("UnblockSecuence", "Computing", new { id = Model.SimCardCode, formulario = "EIIV00201"})' }).done(function () { }); }

        function cargarArchivos() {
            $.ajax({
                url: '@Url.Action("LoadAttachmentFiles", "Computing")?id=SM' + $('#SimCardCode').val().trim(),
                type: "POST",
                data: "",
                dataType: "JSON",
                contentType: "application/json",
                success: function (result) {
                    attachmentFiles = result;
                    if (attachmentFiles.length > 0) {
                        var $ul = $('<ul class="list-unstyled file-list" />');
                        $.each(attachmentFiles, function (i, val) {
                            var $li = $('<li/>');
                            var $a = $('<a href="@Url.Action("Download", "Computing")?id=SM' + $('#SimCardCode').val().trim() + '&FileName=' + val.trim() + '" />')
                            var $delete = $('<a href="#" />')
                            $a.append($('<i class="fa fa-file-pdf-o" />'));
                            $delete.html("&nbsp; &nbsp; &nbsp;");
                            $delete.click(function (e) {
                                e.preventDefault();
                                eliminarArchivo(val.trim());
                            });
                            $delete.append($('<i class="fa fa-remove fa-2x" />'));
                            $li.append($a.html("  " + val));
                            $li.append($delete);
                            $ul.append($li);
                        });
                        $('#attachmentFiles').html($ul);
                    }
                    else {
                        $('#attachmentFiles').html('');
                    }
                }
            });
        }

        function atacharArchivo() {
            var data = new FormData();
            data.append("FileData", document.getElementById("FileData").files[0]);
            data.append("id", 'SM'+ $('#SimCardCode').val());

            $.ajax({
                url: '@Url.Action("AttachFile", "Computing")',
                type: "POST",
                data: data,
                dataType: "JSON",
                contentType: false,
                processData: false,
                success: function (d) {
                    if (d.status == true) {
                        $('#attachmentForm').each(function () {
                            this.reset();
                        });
                        toastr.success('Archivo adjuntado correctamente', 'Adjuntos')
                        cargarArchivos();
                    }
                    else {
                        alert('Ha ocurrido un error');
                    }
                    $('#submit').val('Guardar');
                },
                error: function () {
                    alert('Error. Por favor trate de nuevo.');
                    $('#submit').val('Guardar');
                }
            });
        }

        function eliminarArchivo(fileName) {
            if (confirm("Esta seguro que desea eliminar este archivo ?")) {
                $.ajax({
                    url: '@Url.Action("DeleteFile", "Computing")?id=SM' + $('#SimCardCode').val().trim() + "&fileName=" + fileName,
                    type: "POST",
                    dataType: "JSON",
                    contentType: false,
                    processData: false,
                    success: function (d) {
                        if (d.status == "OK") {
                            toastr.success('Archivo eliminado correctamente', 'Adjuntos');
                            cargarArchivos();
                        }
                        else {
                            alert(d.status);
                        }
                    }
                });
            }
        }

        function guardar() {
            var isAllValid = true;

            if ($('#SimCardCode').val().trim() == '') {
                toastr.error('Debe de especificar un codigo', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#PhoneNumber').val().trim() == '') {
                toastr.error('Debe de especificar un numero de telefono', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#Operator').val().trim() == '') {
                toastr.error('Debe de especificar una operadora', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#MinuteOpen').val().trim() == '') {
                toastr.error('Debe de especificar un tipo de flota', 'Campos requeridos')
                isAllValid = false;
            }

            

            if (isAllValid) {
                $.ajax({
                    url: '@Url.Action("SaveSimCard", "Computing")',
                    type: "POST",
                    data: $('#form').serialize(),
                    success: function (result) {
                        if (result.status == "OK")
                            window.location.href = "@Url.Action("SimCardIndex","Computing")";
                        else
                            swal({
                                title: "ERROR",
                                text: result.status,
                                type: "error"
                            });
                    }
                });
            }
        }

        function eliminar() {
            swal({
                title: "Eliminar",
                text: "Esta seguro que desea eliminar esta tarjeta SIM ?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Si, eliminar!",
                cancelButtonText: "No, cancelar!",
                closeOnConfirm: false
            }, function () {
                $.ajax({
                    url: '@Url.Action("DeleteSimCard", "Computing")?id=' + $('#SimCardCode').val(),
                    type: "POST",
                    data: "",
                    cache: false,
                    dataType: "JSON",
                    contentType: "application/json",
                    success: function (result) {
                        if (result.status === "OK") {
                            window.location.href = '@Url.Action("SimCardIndex", "Computing")';
                        } else {
                            swal({
                                title: "ERROR",
                                text: result.status,
                                type: "error"
                            });
                        }
                    }
                });
            });
        }
    </script>
}
