@model Seaboard.Intranet.Domain.Models.Supplier

@{
    Layout = "~/Views/Shared/_AccountingLayout.cshtml";
    ViewBag.Title = "Proveedor";

    var expenseTypes = new List<SelectListItem>()
    {
        new SelectListItem { Text = "01 - GASTOS DE PERSONAL", Value = "1" },
        new SelectListItem { Text = "02 - GASTOS POR TRABAJOS, SUMINISTROS Y SERVICIOS", Value = "2" },
        new SelectListItem { Text = "03 - ARRENDAMIENTOS", Value = "3" },
        new SelectListItem { Text = "04 - GASTOS DE ACTIVOS FIJO", Value = "4" },
        new SelectListItem { Text = "05 - GASTOS DE REPRESENTACIÓN", Value = "5" },
        new SelectListItem { Text = "06 - OTRAS DEDUCCIONES ADMITIDAS", Value = "6" },
        new SelectListItem { Text = "07 - GASTOS FINANCIEROS", Value = "7" },
        new SelectListItem { Text = "08 - GASTOS EXTRAORDINARIOS", Value = "8" },
        new SelectListItem { Text = "09 - COMPRAS Y GASTOS QUE FORMARON PARTE DEL COSTO DE VENTA", Value = "9" },
        new SelectListItem { Text = "10 - ADQUISICIONES DE ACTIVOS", Value = "10" },
        new SelectListItem { Text = "11 - GASTOS DE SEGURO", Value = "11" }
    };
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Proveedor</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">Inicio</a>
            </li>
            <li>
                <a href="@Url.Action("SupplierIndex", "Accounting")">Listado de proveedores</a>
            </li>
            <li class="active">
                <strong>Proveedor</strong>
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h3>Proveedor</h3>
                </div>

                <div class="ibox-content">
                    <div class="form-group">
                        <div class="col-sm-12 col-sm-offset-1">
                            <button class="ladda-button btn btn-primary" data-style="expand-left" id="saveButton" type="button" onclick="procesarSolicitud();"><i class="fa fa-save"></i> Guardar</button>
                            <button class="btn btn-white" type="button" onclick="limpiarCampos();"><i class="fa fa-eraser"></i> Borrar</button>
                            <br />
                        </div>
                    </div>
                    <br />
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="tabs-container">
            <ul class="nav nav-tabs">
                <li class="active">
                    <a data-toggle="tab" href="#tab-1"> Datos Basicos</a>
                </li>
            </ul>

            <div class="tab-content">
                <div id="tab-1" class="tab-pane active">
                    <div class="panel-body">
                        <fieldset class="form-horizontal">
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Id. de Proveedor:</label>
                                        <div class="col-sm-4 input-group">
                                            <span class="input-group-addon" id="supplier-container"></span>
                                            @Html.TextBoxFor(m => m.SupplierNumber, new { @class = "form-control limitChar", @maxlength = "15" })
                                            @Html.ValidationMessageFor(model => model.SupplierNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">RNC o Cedula:</label>
                                        <div class="col-sm-4 input-group">
                                            <span class="input-group-addon" id="rnc-container"></span>
                                            @Html.TextBoxFor(m => m.RNC, new { @class = "form-control", @maxlength = "11" })
                                            @Html.ValidationMessageFor(model => model.RNC, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Nombre:</label>
                                        <div class="col-sm-8 input-group">
                                            <span class="input-group-addon" id="name-container"></span>
                                            @Html.TextBoxFor(m => m.SupplierName, new { @class = "form-control", @maxlength = "65" })
                                            @Html.ValidationMessageFor(model => model.SupplierName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Email:</label>
                                        <div class="col-sm-8 input-group">
                                            <span class="input-group-addon" id="email-container"></span>
                                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @maxlength = "50" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Contacto:</label>
                                        <div class="col-sm-8 input-group">
                                            <span class="input-group-addon" id="contact-container"></span>
                                            @Html.TextBoxFor(m => m.Contact, new { @class = "form-control limitChar", @maxlength = "61" })
                                            @Html.ValidationMessageFor(model => model.Contact, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Teléfono:</label>
                                        <div class="col-sm-8 input-group">
                                            <span class="input-group-addon" id="phone-container"></span>
                                            @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", @maxlength = "21", @data_mask = "(999)999-9999" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Fax:</label>
                                        <div class="col-sm-8 input-group">
                                            <span class="input-group-addon" id="fax-container"></span>
                                            @Html.TextBoxFor(model => model.FaxNumber, new { @class = "form-control", @maxlength = "21", @data_mask = "(999)999-9999" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Tipo de gastos:</label>
                                        <div class="col-sm-8 input-group">
                                            @Html.DropDownListFor(m => m.ExpenseType, expenseTypes, "Seleccione una opción", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ExpenseType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-4 control-label">Dirección:</label>
                                        <div class="col-sm-8 input-group">
                                            <span class="input-group-addon" id="address-container"></span>
                                            @Html.TextAreaFor(m => m.Address, new { @class = "form-control", @maxlength = "200", @rows = "4" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <input type="hidden" name="CountryCode" id="CountryCode" value="01" />
                                        <label class="col-sm-4 control-label">País:</label>
                                        <div class="col-sm-8 input-group">
                                            @Html.TextBoxFor(model => model.Country, new { @class = "form-control", @readonly = "" })
                                            <span class="input-group-btn">
                                                <button id="lookupPaís" type="button" class="btn btn-primary">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <input type="hidden" name="StateCode" id="StateCode" />
                                        <label class="col-sm-4 control-label">Provincia:</label>
                                        <div class="col-sm-8 input-group">
                                            @Html.TextBoxFor(model => model.State, new { @class = "form-control", @readonly = "" })
                                            <span class="input-group-btn">
                                                <button id="lookupProvincia" type="button" onclick="getProvincia();" class="btn btn-primary">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <input type="hidden" name="CityCode" id="CityCode" />
                                        <label class="col-sm-4 control-label">Ciudad:</label>
                                        <div class="col-sm-8 input-group">
                                            @Html.TextBoxFor(model => model.City, new { @class = "form-control", @readonly = "" })
                                            <span class="input-group-btn">
                                                <button id="lookupCiudad" type="button" onclick="getCiudad();" class="btn btn-primary">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <link href="@Url.Content("~/Content/plugins/lookupbox/lookupbox.css")" rel="stylesheet" type="text/css" />
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/laddaStyles")
    @Styles.Render("~/plugins/sweetAlertStyles")
}

@section Scripts {
    @Scripts.Render("~/Scripts/plugins/jquery-ui/jquery-ui.min.js")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/Scripts/plugins/lookupbox/jquery.lookupbox.js")
    @Scripts.Render("~/plugins/ladda")
    @Scripts.Render("~/plugins/sweetAlert")
    <script>
        $(document).ready(function () {
            $('#SupplierNumber').EnsureMaxLength({
                limit: 15,
                cssClass: '',
                separator: '/',
                placement: '#supplier-container'
            });
            $('#RNC').EnsureMaxLength({
                limit: 11,
                cssClass: '',
                separator: '/',
                placement: '#rnc-container'
            });
            $('#SupplierName').EnsureMaxLength({
                limit: 65,
                cssClass: '',
                separator: '/',
                placement: '#name-container'
            });
            $('#Email').EnsureMaxLength({
                limit: 50,
                cssClass: '',
                separator: '/',
                placement: '#email-container'
            });
            $('#Contact').EnsureMaxLength({
                limit: 61,
                cssClass: '',
                separator: '/',
                placement: '#contact-container'
            });
            $('#Address').EnsureMaxLength({
                limit: 200,
                cssClass: '',
                separator: '/',
                placement: '#address-container'
            });
            $('#PhoneNumber').EnsureMaxLength({
                limit: 21,
                cssClass: '',
                separator: '/',
                placement: '#phone-container'
            });
            $('#FaxNumber').EnsureMaxLength({
                limit: 21,
                cssClass: '',
                separator: '/',
                placement: '#fax-container'
            });
            @Html.Partial("_Scripts")
            $('#RNC').focusout(function () {
                if ($('#RNC').val().trim().length > 0) {
                    if ($('#RNC').val().trim().length != 9 && $('#RNC').val().trim().length != 11) {
                        toastr.error("El RNC debe ser de longitud de 9 o 11 caracteres")
                        $('#RNC').val("");
                        $('#RNC').focus();
                    }
                }
            });

            $('#lookupPaís').lookupbox({
                title: 'Busqueda:',
                url: '@Url.Action("ListLookup", "Home")?tipo=38&consulta=',
                imgLoader: '<img src="~/Images/ajaxloader.gif">',
                width: 800,
                height: 1000,
                onItemSelected: function (data) {
                    $('input[name=Country]').val(data.Descripción);
                    $('input[name=CountryCode]').val(data.Id);
                },
                tableHeader: ['Id. de país', 'Descripción'],
                hiddenFields: ['DataExtended']
            });
            $('.ladda-button').ladda();
        });

        function getProvincia() {
            if ($('#CountryCode').val().trim().length > 0) {
                $('#lookupProvincia').lookupbox({
                    title: 'Busqueda:',
                    url: '@Url.Action("ListLookup", "Home")?tipo=39&consultaExtra=' + $('#CountryCode').val().trim() + '&consulta=',
                    imgLoader: '<img src="~/Images/ajaxloader.gif">',
                    width: 800,
                    height: 1000,
                    onItemSelected: function (data) {
                        $('input[name=StateCode]').val(data.Id);
                        $('input[name=State]').val(data.Descripción);
                    },
                    tableHeader: ['Id. de provincia', 'Descripción'],
                    hiddenFields: ['DataExtended']
                });

            } else {
                toastr.error("Debe de especificar un país antes de poder seleccionar una provincia");
            }
        }

        function getCiudad() {
            if ($('#StateCode').val().trim().length > 0) {
                $('#lookupCiudad').lookupbox({
                    title: 'Busqueda:',
                    url: '@Url.Action("ListLookup", "Home")?tipo=40&consultaExtra=' + $('#CountryCode').val().trim() + "," + $('#StateCode').val().trim() + '&consulta=',
                    imgLoader: '<img src="~/Images/ajaxloader.gif">',
                    width: 800,
                    height: 1000,
                    onItemSelected: function (data) {
                        $('input[name=CityCode]').val(data.Id);
                        $('input[name=City]').val(data.Descripción);
                    },
                    tableHeader: ['Id. de ciudad', 'Descripción'],
                    hiddenFields: ['DataExtended']
                });
            } else {
                toastr.error("Debe de especificar una provincia antes de poder seleccionar una ciudad");
            }
        }

        function procesarSolicitud() {
            var isAllValid = true;

            if ($('#SupplierNumber').val().trim() == '') {
                toastr.error('Debe de especificar un id. de proveedor', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#SupplierName').val().trim() == '') {
                toastr.error('Debe de especificar un nombre', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#RNC').val().trim() == '') {
                toastr.error('Debe de especificar un RNC o Cedula', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#ExpenseType').val().trim() == '') {
                toastr.error('Debe de especificar un tipo de gastos', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#Address').val().trim() == '') {
                toastr.error('Debe de especificar una direccion', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#Country').val().trim() == '') {
                toastr.error('Debe de especificar un pais', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#State').val().trim() == '') {
                toastr.error('Debe de especificar una provincia', 'Campos requeridos')
                isAllValid = false;
            }

            if ($('#City').val().trim() == '') {
                toastr.error('Debe de especificar una ciudad', 'Campos requeridos')
                isAllValid = false;
            }

            if (isAllValid) {
                $('#saveButton').ladda('start');
                var data = {
                    SupplierNumber: $('#SupplierNumber').val(),
                    RNC: $('#RNC').val(),
                    SupplierName: $('#SupplierName').val(),
                    Contact: $('#Contact').val(),
                    Address: $('#Address').val(),
                    State: $('#State').val(),
                    City: $('#City').val(),
                    Country: $('#Country').val(),
                    PhoneNumber: $('#PhoneNumber').val(),
                    FaxNumber: $('#FaxNumber').val(),
                    ExpenseType: parseInt($('#ExpenseType').val()),
                    Email: $('#Email').val(),
                };
                $.ajax({
                    url: '@Url.Action("SaveSupplier", "Accounting")',
                    type: "POST",
                    data: JSON.stringify(data),
                    cache: false,
                    dataType: "JSON",
                    contentType: "application/json",
                    success: function (result) {
                        if (result.status === "OK") {
                            window.location.href = '@Url.Action("SupplierIndex", "Accounting")';
                        } else {
                            swal({
                                title: "ERROR",
                                text: result.status,
                                type: "error"
                            });
                        }
                        $('#saveButton').ladda('stop');
                    }
                });
            }
        }

        function limpiarCampos() {
            $('#SupplierNumber, #SupplierName, #ShortName, #RNC, #Email, #Contact').val('');
            $('#Address, #Country, #City, #State, #PhoneNumber, #FaxNumber').val('');
        }
    </script>
}
